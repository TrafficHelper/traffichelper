Test Results Table:

See user_requirements.txt for a list of ALL functionality asked by user
Some functions may not be mentioned but are part of a callstack; this is done to save space
Look at the mentioned top-level code blocks (and second-level ones, if they are critical) to find them
All code was tested for a final time on 30/5/2024 and all methods were passed EXACTLY in line with requirements
Functionality is also contained in code blocks tested

Requirement                                                                     Code blocks tested                                                      Status (ALL PASSED)         Notes(contained along with code block descriptions)         Final Testing Date (30/5/2024)

A. Necessities: To have a software program which possesses a detailed traffic   /backend
                network of the city of Ottawa with flows, traffic gadgets, and  /Accident (accident.py, environment.py, injury.py, outcome.py)
                travel data, including accidents, which:                        /gadgets.py, (STRONG): /loader.py, /filenames.py (for Data)
                                                                                /constants.py
1. Meets all requirements                                                       All
2. Contains a website which                                                     /frontend
2.1. Has a distinction between users and administrators                         /CLI.cli(), /user.make_admin() /utils.py
2.2. Is easily accessible and understandable with instructions                  "man" in /CLI.cli(), /Documentation, /CLI-instructions.txt
2.3. Is well-designed, formatted and appealing                                  /frontend
2.4. Some means of contacting the developers if an error occurs                 /Documentation/sdd
2.5. Does the following
2.5.1. Has a login system to identify the user and administrator                /frontend/
2.5.2. Has a preferences page for both users and administrators                 /openapi_server/preferences_impl.py,
                                                                                /backend/Interfaces/interfacer.py in obtain_preferences()
                                                                                /backend/User/preferences.py in preferences setter
2.5.2.1. To set their preferred or commonly-used vehicle from a                 /backend/Interfaces/interfacer.py in select_vehicle(),
dropdown of Pedestrian, Bicycle, Motorcycle, Car, Truck, Other conveyance
2.5.2.2. To set the contextual environment from a dropdown of Ideal,            /backend/Interfaces/interfacer.py in select_environment(),
         Normal, Abnormal, Deviant, Troublesome, Extreme
2.5.2.3. To have a dropdown of the weekday and time they choose to leave        /backend/Interfaces/interfacer.py in select_depart_time()
2.5.2.4. To set their preferred emphasis via three sliders, on                  /backend/Interfaces/interfacer.py in path_metric()
2.5.2.4.1. Accident chance
2.5.2.4.2. Elapsed time
2.5.2.4.3. Total distance
2.5.2.5. An integer field allowing them to choose the number of paths           /backend/Interfaces/interfacer.py in select_num_paths(),
        they want
2.5.3. Has a routing page which
2.5.3.1. Displays a zoom-able interactive map                                   /frontend
2.5.3.2. Allows a start and an end point overlaid on the interactive            /frontend
         map which permits the user to move the start and end points            /backend/Interfaces/interfacer.py in select_start(), select_end(),
         to their desired start and end locations
2.5.3.3. Allows the user to enter start and end addresses in similarly-         /frontend
         named fields                                                           /backend/Interfaces/interfacer.py in select_start(), select_end(),

2.5.3.4. Submit the form                                                        /backend/Interfaces/interfacer.py in submit_path_form(),
2.5.4. Has a results page which
2.5.4.1. Computes an optimal path from the user's start and end points          /backend/Code/Utils/utils.py in optimal_paths()
         according to their preferences
2.5.4.2. Overlays each of those paths on the map network in a                   /frontend, /backend/Code/Utils/utils in paths_coordinates()
         distinguishably different color
2.5.4.3. Identifies each of the paths along with                                /backend/Code/Utils/utils in optimal_paths()
2.5.4.3.1. The absolute accident risk                                           Same function as parent category
2.5.4.3.2. The path duration                                                    Same function as parent category
2.5.4.3.3. The length of the path                                               Same function as parent category
2.5.5. Has a recommendations page encouraging citizen activism which
2.5.5.1. Contains a budget field allowing the user to enter a budget in         /frontend
         dollars
2.5.5.2. A list of checkboxes to select a given subset of traffic gadgets:      /frontend
         Lane, Discrete Speed Limit Block, Traffic Light, Speed Camera
2.5.5.3. The ability to ask a question (which is either pertaining to the       /frontend
         traffic network or for recommendations)
2.5.5.4. Computes and returns user-readable nicely-formatted data in a          /frontend
         textbox, responding to the asked question and in the context of
         the recommendations page
2.5.6. Has the ability to view a manual and user guide of how TrafficHelper     /frontend
       works
3. Contains a Command-Line-Interface (CLI) which                                /User/main.py, /User/cli.py
3.1. Allows ALL actions permissible to the website, possibly excluding the      /User/cli.py
     recommendations section
3.2. Is fast and effective and accurate                                         /User/cli.py, __init__(), repl(), execute_command()
3.3. Is failsafe and provides helpful error messages                            repl()
3.4. See how the CLI works through entering a command to see the manual         "man" in repl()
3.5. Possesses actions not permissible to the website, including
3.5.1. The ability to view the exact sequence of roads which is taken for       /backend/Code/Utils/utils in paths_names()
       an optimal path (website not needing due to already visually displaying)
3.5.2. The ability to edit the traffic network through the addition or removal  /backend/Code/modifications.py
       of road segments and intersections or traffic gadgets with the option to /backend/Code/User/cli.py
3.5.2.1. Refactor the traffic network to account for these changes and in an    /backend/Code/modifications.py in apply()
         internally consistent manner satisfying                                /backend/Code/Utils/utils.py in apply()
3.5.2.1.1. Conservation of total traffic flow                                   Same as parent category
3.5.2.1.2. Reversibility of changes                                             Same as parent category
3.5.2.1.3. Optimal bounded rational behaviour                                   Same as parent category
3.5.2.2. Override refactoring to directly make changes                          /backend/Code/modifications.py in __init__(), last param = False
3.5.2.3. Return the cost of a modification and whether modification sequence    /Atomic/gadget.py in overridden cost() from /Interfaces/cost.py
         was successful


UNIMPLEMENTED NICE_TO_HAVES:

B. Nice-To-Haves (some requirements represented in the beta website): Some of the nice-to-haves were suggested by the client (marked with 'C'), while others were suggested by the team (marked with 'T')
    4. A more accurate traffic system
        4.1(T). With the ability to simulate individuals' individual preferences, on average
        4.2(C). Incorporating accident risk, time risk and cost risk on intersections and departure time
        4.3(T). Using a specialized AI to obtain data and predict traffic modifications instead of ~AGI
        4.4(C). Including time-of-day dependence on traffic network properties
        4.5(C). Accessing a Weather API to determine environment amenability as an option for the user to set their environment based on their time of departure
        4.6(T). Using traffic micro-simulation libraries to optimize the traffic network to granular precision
        4.7(T). Serialization and deserialization all object data
        4.8(T). Improve efficiency through implementation of specialized powerful algorithms such as Yen's Algorithm with Fibonacci Heap










